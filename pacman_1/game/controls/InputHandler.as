package game.controls {		import flash.display.DisplayObject;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.KeyboardEvent;		public class InputHandler extends EventDispatcher {		protected var _keysDown:Object = new Object();		protected var _attachment:DisplayObject;				/**		 *		 * @param attachment The Object on the stage to attach the event listener to. Should be the stage.		 *		 */		 		public function InputHandler(attachment:DisplayObject):void {			this._attachment = attachment;			// constructor code			this._attachment.addEventListener(KeyboardEvent.KEY_DOWN, this.registerKey);			this._attachment.addEventListener(KeyboardEvent.KEY_UP, this.unregisterKey);		}				/**		 *		 * Adds the key to <code>_keysDown</code>/		 *		 * @param keyCode The key code of the key.		 *		 */		 		public function registerKey(event:KeyboardEvent):void {			this._keysDown[event.keyCode] = true;			this._attachment.addEventListener(Event.ENTER_FRAME, this.checkKeys);		}				/**		 *		 * Removed the key from <code>_keysDown</code>		 *		 * @param keyCode the key code of the key.		 *		 */		 		public function unregisterKey(event:KeyboardEvent):void {			delete this._keysDown[event.keyCode];		}				/**		 * 		 * Checks if the specified keys are down and dispatches an event for each on if they are, Meant to be dispatched on <code>ENTER_FRAME</code>.		 *		 * @param event The <code>Event.ENTER_FRAME</code> event.		 *		 */		 		public function checkKeys(event:Event):void {			var notNull:Boolean = false;			for each(var key:* in this._keysDown) {				if(key != null) {					notNull = true;					break;				}			}			if (notNull) {				this.dispatchEvent(new KeyEvent(KeyEvent.KEYS_DOWN, this._keysDown));			} else {				this.dispatchEvent(new KeyEvent(KeyEvent.NO_KEY_DOWN, null));				this._attachment.removeEventListener(Event.ENTER_FRAME, this.checkKeys);			}		}	}}