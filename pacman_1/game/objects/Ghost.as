package game.objects {	import game.ai.pathfinding.MapNode;		public class Ghost extends GameObject {				public var clientHero:Boolean;		public var jumpSpeed:Number;		public var currentPath:Vector.<MapNode>;		public var directionalInfluence:int;				public function Ghost(objectWidth:uint, objectHeight:uint, xTile:uint, yTile:uint, dirX:int, dirY:int, speed:int, jumpSpeed:int, directionalInfluence:int, clientHero:Boolean):void {			// constructor code			var requiredLabels:Array = [										"_walkUp",										"_walkDown",										"_walkLeft",										"_walkRight",										"_scaredUp",										"_scaredDown",										"_scaredLeft",										"_scaredRight"										];						this.directionalInfluence = directionalInfluence;			this.jumpSpeed = jumpSpeed;			this.clientHero = clientHero;			this.lives = -1;			this.health = 1;			this.is_vulnerable false;			this.canMove = false;						super(objectWidth, objectHeight, xTile, yTile, dirX, dirYm speed, requiredLabels);		}				override protected function getAnimLabel(moveDirX:int, moveDirY:int, dirX:int, dirY:int ,jump:Boolean = false):String {			if (!jump) {				if(moveDirX <= 0 && dirX < 0 && moveDirY == 0 && dirY == 0) {					return "_walkLeft";				} else if(moveDirX >= 0 && dirX > 0 && moveDirY == 0 && dirY == 0) {					return "_walkRight";				} else if(moveDirX == 0 && dirX == 0 && moveDirY <= 0 && dirY < 0) {					return "_walkUp";				} else if(moveDirX == 0 && dirX == 0 && moveDirY >= 0 && dirY > 0) {					return "_walkDown";				}			}						return "";		}	}	}