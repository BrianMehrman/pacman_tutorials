package game.map {	import game.objects.GameObject;	import flash.events.Event;	import flash.utils.getQualifiedSuperclassName;	import flash.utils.getDefinitionByName;	import game.GameClient;	import game.GameEvent;	import game.objects.Hero;	import game.objects.Item		public class SpawnTile extends Tile{		protected var spawnObject:Class;		protected var delay:int;			public function SpawnTile(spawn:Class, delay:int, solid:Boolean, slope:int, top:Boolean) {			// constructor code			this.spawnObject = spawn;			this.delay = delay;			super(solid, slope, top);			this.addEventListener(Event.ADDED_TO_STAGE, init);		}				public function init(e:Event){			this.stage.addEventListener(GameEvent.GAME_STARTED, start_spawn);		}				public function start_spawn(e:GameEvent) {			//var g:GameClient = this.root.gameClient;			this.stage.dispatchEvent(new TileEvent(TileEvent.SPAWN_OBJECT,this));		}				public function spawnProxy(gameClient:GameClient,xTile:int, yTile:int):void {			var c:Class = Class(getDefinitionByName(getQualifiedSuperclassName(this.spawnObject)));			if (c == Hero) {				gameClient.addHero(this.spawnObject, xTile, yTile, 1, 0, true);			} else if (c == Item) {				gameClient.addItem(this.spawnObject, xTile, yTile);			} else {				// add restarted listener				this.stage.addEventListener(GameEvent.GAME_RESTARTED, start_spawn);				gameClient.addEnemy(this.spawnObject, this.delay, xTile, yTile, 1, 0, false);						}		}				public function spawn(count:int, gameClient:GameClient):Array {			var spawn_array:Array= [];						for( var i:int=0; i<count;i++){				//var new_spawn = this.spawnObject.clone();				//spawn_array.push(new_spawn);							if (gameClient.stage != null){					// add enemy to game client					var xTile:int = Math.ceil(this.x/this.width);					var yTile:int = Math.ceil(this.y/this.height);					this.spawnProxy(gameClient, xTile, yTile);				}			}						return spawn_array;		}	}	}