package game.objects {	import game.ai.pathfinding.MapNode;	import game.ai.pathfinding.AStar;	import game.map.Tile;	import game.controls.AIController;	import game.GameEvent;	import flash.geom.Point;	import flash.utils.Timer;	import flash.events.TimerEvent;		public class Enemy extends GameObject {				public var jumpSpeed:Number;		public var directionalInfluence:int;				public  var currentTileTarget:Tile;		public 	var startDelay:int;		private var _chaseSpeed:int = 5;		private var _currentTarget:GameObject;		private var _ai_controller:AIController;		private var _movementHandler:MovementHandler;		public function Enemy(objectWidth:uint, objectHeight:uint, xTile:uint, yTile:uint, dirX:int, dirY:int, speed:int, jumpSpeed:int, directionalInfluence:int, delay:int, clientHero:Boolean, initTarget:GameObject, movementHandler:MovementHandler):void {			// constructor code			var requiredLabels:Array = [										"_walkUp",										"_walkDown",										"_walkLeft",										"_walkRight"										//"_scaredUp",										//"_scaredDown",										//"_scaredLeft",										//"_scaredRight"										];						this.directionalInfluence = directionalInfluence;			this.jumpSpeed = jumpSpeed;			this.clientHero = clientHero;			this._movementHandler = movementHandler;			this.startDelay = delay;			this.targetObject = initTarget;						this.addEventListener(GameEvent.CHASE_STATE, this.chase);			this.addEventListener(GameEvent.FEAR_STATE, this.frighten);			this.addEventListener(GameEvent.SCATTER_STATE, this.scatter);						this._ai_controller = new AIController(this,this._movementHandler,new AStar());			// create start delay			var t:Timer = new Timer(this.startDelay);			t.addEventListener(TimerEvent.TIMER, startListening);			t.start();						super(objectWidth, objectHeight, xTile, yTile, dirX, dirY, speed, requiredLabels, this._movementHandler.game);		}				public function startListening(e:TimerEvent):void {			e.currentTarget.removeEventListener(TimerEvent.TIMER, startListening);			e.currentTarget.stop();			this._ai_controller.startListening();		}		override protected function getAnimLabel(moveDirX:int, moveDirY:int, dirX:int, dirY:int ,jump:Boolean = false):String {						if (!jump) {				if(moveDirX <= 0 && dirX < 0 && moveDirY == 0 && dirY == 0) {					return "_walkLeft";				} else if(moveDirX >= 0 && dirX > 0 && moveDirY == 0 && dirY == 0) {					return "_walkRight";				} else if(moveDirX == 0 && dirX == 0 && moveDirY <= 0 && dirY < 0) {					return "_walkUp";				} else if(moveDirX == 0 && dirX == 0 && moveDirY >= 0 && dirY > 0) {					return "_walkDown";				}			}						return "";		}				override public function destroy():void {			this._ai_controller.stopListening();			super.destroy();		}				override public function chase():void {						// default enemy chase bahavior.						// find targets tile in front or behind them						var destX:int = Math.floor(this.targetObject.x/this._movementHandler.game.tileW);			var destY:int = Math.floor(this.targetObject.y/this._movementHandler.game.tileH);			this._ai_controller.newTarget(destX, destY);					}				override public function scatter():void {			// find the furthest point from the target 						// go through teleport if close					}				override public function frighten():void {			// run away from target					}			}	}