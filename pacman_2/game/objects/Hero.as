package game.objects {		import game.ai.pathfinding.MapNode;		import flash.display.MovieClip;	import flash.events.Event;	import game.Game;		public class Hero extends GameObject {		public var jumpSpeed:Number;		public var directionalInfluence:int;				/**		 *		 * @param objectWidth The registered width of the object.		 * @param objectHeight The registered height of the object.		 * @param xTile The starting x tile coordinate of the object.		 * @param yTile The starting y tile coordinate of the object.		 * @param dirX The starting x direction of the object.  -1 means left, 1 right, 0 up or down.		 * @param dirY The starting y direction of the object.  -1 means up, 1 down, 0 left or right.		 * @param speed The speed of the object in pixels per frame.		 * @param jumpSpeed The speed in pixels/frame the object jumps at.		 * @param directionalInfluence The directional influence of the hero (the pixels/frame the hero can influence its direction after it has jumped).		 * @param clientHero <code>true</code> if this hero is the client's hero (meaning it's controllable).  <code>false</code> if it's not.		 *		 */		 		public function Hero(objectWidth:uint, objectHeight:uint, xTile:uint, yTile:uint, dirX:int, dirY:int, speed:int, jumpSpeed:int, directionalInfluence:int, clientHero:Boolean, game:Game):void {			// constructor code			var requiredLabels:Array = [										"_walkUp",										"_walkDown",										"_walkLeft",										"_walkRight"										/*"_strafeUp",										"_strafeDown",										"_strafeLeft",										"_strafeRight",										"_jumpUp",										"_jumpDown",										"_jumpLeft",										"_jumpRight",										"_strafeJumpUp",										"_strafeJumpDown",										"_strafeJumpLeft",										"_strafeJumpRight"*/										];			this.directionalInfluence = directionalInfluence;			this.jumpSpeed = jumpSpeed;			this.clientHero = clientHero;			this.is_vulnerable = true;			this.canMove = true;			this.lives = 3;			super(objectWidth, objectHeight, xTile, yTile, dirX, dirY, speed, requiredLabels, game);		}				/**		 * 		 * Gets the animation label for the passed values.		 *		 * @param moveDirX The direction the object is moving on the x plane.		 * @param moveDirY The direction the object is moving on the y plane.		 * @param dirX The direction the object is facing on the x plane.		 * @param dirY The direction the object is facing on the y plane.		 * @param jump <code>true</code> if the move is a jump, <code>false</code> if it is not.		 *		 */				override protected function getAnimLabel(moveDirX:int, moveDirY:int, dirX:int, dirY:int, jump:Boolean = false):String {			if(!jump) {				if(moveDirX <= 0 && dirX < 0 && moveDirY == 0 && dirY == 0) {					return "_walkLeft";				} else if(moveDirX >= 0 && dirX > 0 && moveDirY == 0 && dirY == 0) {					return "_walkRight";				} else if(moveDirX == 0 && dirX == 0 && moveDirY <= 0 && dirY < 0) {					return "_walkUp";				} else if(moveDirX == 0 && dirX == 0 && moveDirY >= 0 && dirY > 0) {					return "_walkDown";				} else if(moveDirX == 0 && dirX < 0 && moveDirY != 0 && dirY == 0) {					return "_strafeLeft";				} else if(moveDirX == 0 && dirX > 0 && moveDirY != 0 && dirY == 0) {					return "_strafeRight";				} else if(moveDirX != 0 && dirX == 0 && moveDirY == 0 && dirY < 0) {					return "_strafeUp";				} else if(moveDirX != 0 && dirX == 0 && moveDirY == 0 && dirY > 0) {					return "_strafeDown";				}			} else {				if(moveDirX <= 0 && dirX < 0 && moveDirY == 0 && dirY == 0) {					return "_jumpLeft";				} else if(moveDirX >= 0 && dirX > 0 && moveDirY == 0 && dirY == 0) {					return "_jumpRight";				} else if(moveDirX == 0 && dirX == 0 && moveDirY <= 0 && dirY < 0) {					return "_jumpUp";				} else if(moveDirX == 0 && dirX == 0 && moveDirY >= 0 && dirY > 0) {					return "_jumpDown";				} else if(moveDirX == 0 && dirX < 0 && moveDirY != 0 && dirY == 0) {					return "_strafeJumpLeft";				} else if(moveDirX == 0 && dirX > 0 && moveDirY != 0 && dirY == 0) {					return "_strafeJumpRight";				} else if(moveDirX != 0 && dirX == 0 && moveDirY == 0 && dirY < 0) {					return "_strafeJumpUp";				} else if(moveDirX != 0 && dirX == 0 && moveDirY == 0 && dirY > 0) {					return "_strafeJumpDown";				}			}						return "";		}	}	}